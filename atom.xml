<?xml version="1.0" encoding="utf-8"?>
<feed 
  
  
  xmlns="http://www.w3.org/2005/Atom">
  <title>心&amp;麓 - Xiang HongAi&#39;s Personal Website</title>
  <link href="https://xinlu.ink/atom.xml" rel="self"/>
  <link href="https://xinlu.ink/"/>
  <updated>2021-07-10T16:20:45.793Z</updated>
  <id>https://xinlu.ink/</id>
  <author>
    <name>小可</name>
  </author>
  <generator uri="https://hexo.io/">Hexo</generator>
  <entry>
    <title>Vue 中分层</title>
    <link href="https://xinlu.ink/tech/vue-architecture.html"/>
    <id>https://xinlu.ink/tech/vue-architecture.html</id>
    <published>2021-07-03T12:06:18.000Z</published>
    <updated>2021-07-10T16:20:45.793Z</updated>
    <content type="html">
      <![CDATA[<p>Vue 开发做分层架构。</p><span id="more"></span><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>我们在实践中面临的主要问题有两个，一是需求变化，二是技术整合。</p><p>这两种因素直接造成源码物理体积增加和冗余。又长、又多、又有重复，又要拥抱变化，这对开发工作最直接的影响就是难维护。</p><p>“多”层面无法解决，任何事物渐进迭代之后，“多”是必然。</p><p>“长”和“重复”是由于累积造成，累积原因有两点，一是迫于快速交付成果“高效率”产出，二是缺少相关抽象归纳意识及环境因素驱动。我们都有受这种“累积”的影响，同时，我们或多或少也在制造这些“累积”。</p><p>“长”可以切段，“重复”可以提炼。怎么切，怎么提，有许多模式提出，如 MVP、MVC、MVVM、BDD、DDD，名字和理念虽异，但背后思想是一样的：分离、分层。</p><p>本文将从采用 Vue 技术体系过程中面临和制造“长”、“重复”的问题展开 (亦适用于其它技术体系)。</p><h3 id="Smart-UI-Anti-Pattern-和-误解"><a href="#Smart-UI-Anti-Pattern-和-误解" class="headerlink" title="Smart UI Anti-Pattern 和 误解"></a>Smart UI Anti-Pattern 和 误解</h3><p>Vue 官网上教程示例和 Cookbook 示例， 是有着 The Smart UI Anti-Pattern 味道的，造成部分开发者停留其上，认为那就是 Vue Style。这是对 Vue 的误解，造成这个误解的一部分原因是 Vue 团队在应用开发实践上对开发者系统化的指导少 (相对于 Angular 和 React 来说)，另一部分原因是部分开发者缺少分层架构的思想。</p><p>本文将基于以下各体系知识来探讨 Vue 中如何实现代码分层。</p><h3 id="模式、意识"><a href="#模式、意识" class="headerlink" title="模式、意识"></a>模式、意识</h3><p>数据意识：</p><blockquote><p>在 MVVM 模式框架中，我们要始终在脑子里挂着 Model 的弦。不能老想着“我有 ××× 这个 DOM，我要让它做 ××× 变化”，而应该是先思考我们有或需要什么样的 Model 数据，然后设计我们的交互数据和交互逻辑，最后才去实现视图，并用 ViewModel 去粘合它们。</p><p>——《AngularJS 深度剖析与最佳实践》</p></blockquote><p>领域、场景 (上下文)、角色意识：</p><blockquote><p>一个储蓄账户，可以“增/减账户中的钱” (数据特征，是什么)，可以“存/取款” (数据意图，做什么)，“存/取款”意味着事务语义、用户交互、异常恢复、处理业务规则和错误情况，这些超出了单个数据模型的处理能力。“增/减账户中的钱”仅是账户具备的一个性质，只关系到一个对象的状态，而“存/取款”是属于整个系统的行为，它影响着整个系统的状态，从系统架构、软件工程、变化率的角度看，这是两种差别极大的性质，而面向对象却将这些归到了一起。</p><p>将稳定的部分和将会变化的部分区分开，如果说对象反映了代码中的稳定部分，那么在代码中还应该有一种对象以外的机制去表达需求变化。</p><p>DCI 架构：</p><ul><li>  数据 (Data)，存在领域对象里，领域对象源自领域类；</li><li>  场景 (Context)，根据需要将活动对象带到场景中的位置；</li><li>  交互 (Interaction)，从角色的角度描绘最终用户对算法的思维 (关于对象做什么的行为的集合)。</li></ul><p>将变化率高的用例部分和稳定的领域部分分离开，拥抱变化。</p><p>——《DCI架构：​面向对象编程的新构想》</p></blockquote><p>领域意识：</p><blockquote><p>在面向对象的程序中，常常会在业务对象中直接写入用户界面、数据库访问等支持代码。而一些业务逻辑则会被嵌入到用户界面组件和数据库脚本中。这么做是为了以最简单的方式在短期内完成开发工作。</p><p>要想创建出能够处理复杂任务的程序，需要做到关注点分离——使设计中的每个部分都得到单独的关注。在分离的同时，也需要维持系统内部复杂的交互关系。</p><p>—— <a href="https://www.bookstack.cn/read/Domain-Driven-Design-zh/docs-ch4.md">《领域驱动设计：软件核心复杂性应对之道》</a></p></blockquote><p>行为意识：</p><blockquote><p>场景的片段——给定、事件和结果——粒度足够细，可以直接用代码表示。</p><p>然后将所有这些连接在一起并执行它们。它创建了一个“世界”，它只是在某个地方存储您的对象，并将其依次传递给每个给定对象，以便它们可以用已知状态填充世界。</p><p>—— <a href="https://dannorth.net/introducing-bdd/">《Introducing BDD》</a></p></blockquote><p>组合意识 (不是混合，is composition, not mixin)：</p><blockquote><p>组件描述了任何可组合的行为，包含渲染、生命周期和 state。</p><p>组件之间的组合是 React 的重要特征。</p><p>—— React</p></blockquote><p>服务化意识：</p><blockquote><p>服务是一个广义的概念，它包括应用所需的任何值、函数或特性。狭义的服务是一个明确定义了用途的类。</p><p>Angular 把组件和服务区分开，以提高模块性和复用性。通过把组件中和视图有关的功能与其它类型的处理分离开，你可以让组件类更加精简、高效。</p><p>理想情况下，组件的工作只管用户体验，而不用顾及其它。 它应该提供用于数据绑定的属性和方法，以便作为视图（由模板渲染）和应用逻辑（通常包含一些<em>模型</em>的概念）的中介者。</p><p>—— Angular</p></blockquote><p>这些模式、意识，旨在分层。</p><p>我们需要先了解、接受上述各体系中的模式、意识，而不是 “不要跟我说什么……，老夫搬砖都是一把梭” 排斥、抗拒和抵制。</p><p>接下来，我们思考框架/库和我们业务各自处理的是什么。</p><h3 id="框架和库、业务关注点"><a href="#框架和库、业务关注点" class="headerlink" title="框架和库、业务关注点"></a>框架和库、业务关注点</h3><p>首先，我们能明确框架/库的功能是将应用拆解成<strong>特定目标的对象</strong>，如 Module、Model、View、ViewModel、Controller、Service、Component、Directive 等不同特征的对象，然后再组织起来使其<strong>相互协作</strong>；这种设计遵循了“职责驱动设计”和“契约式设计”原则，使开发者容易接受、理解和应用，像 VueX、Redux、Mobx、Context 这类设计，是为了生成一个专门用于管理数据状态的环境，关注点分离，这个环境是独立的、隔离的，我们需要从另一个维度去思考和实践，如是否需要采用这类解决方案，以及如何使用。</p><p>其次，我们能明确要处理的不同层次的对象/用例都是由属性、特性和行为组成的数据，是存在边界的和可预测的 (即使需求发生变化)，这些属性、特性和行为，最终是能反应到视觉和体验上的；这部分数据，和框架和库是分离的，不存在依赖关系。</p><p>最后，我们要做的是，独立实现用例，用框架或库组织这些实现。</p><p>例如在 Vue 中，Vue：</p><p>提供了 Component 机制，用于提供场景；</p><p>提供了 Template/Render 机制，用于视图；</p><p>提供了 Data/Props/Computed/Reactivity 机制，用于将数据带到视图中；</p><p>提供了 Method 机制，用于将行为与数据、视图关联；</p><p>提供了 Watch 机制，用于将数据与数据、行为关联；</p><p>提供了 Mixins 机制，用于解决横切关注点问题；</p><p>提供了 Lifecycle 机制，用于场景进入和退出；</p><p>提供了 Directive 机制，用于框架和终端交互；</p><p>我们在实践时候，尽可能的将框架/库中的特定机制当作一个“连接器”，而不是“实现”、“执行”，具体的细节，尽可能的分层到对应机制的层级结构中。</p><p>接下来，我们思考如何将分层模式、意识与一个框架/库结合起来。</p><h3 id="分层"><a href="#分层" class="headerlink" title="分层"></a>分层</h3><h4 id="Data-Data-Props-Computed-Reactivity"><a href="#Data-Data-Props-Computed-Reactivity" class="headerlink" title="Data (Data/Props/Computed/Reactivity)"></a>Data (Data/Props/Computed/Reactivity)</h4><p>Vue 中 Data 主要作用不是生成数据，而是将数据响应化反馈到视图中，因此在 Data 层，建议抽出两个层面：</p><p>1、一个用于控制视图特性 —— 视觉 (尺寸、可视)，</p><p>2、一个用于填充视图属性 —— 内容 (表格、表单)；</p><p>特性数据可以直接定义或声明；</p><p>属性数据建议按领域、实体创建模型；囿于 JavaScript 缺少 Interface 机制，数据模型建议用函数返回对象形式 (工厂模式) 替代；</p><p>数据模型建议存放在服务中。</p><h4 id="行为"><a href="#行为" class="headerlink" title="行为"></a>行为</h4><p>行为的形式有 UI Events、XHR/Fetch、Timers、Browser Location、Service Worker、事务等，可将这些行为细节封装到服务中 (非 UI 逻辑和代码)，供 Vue 取用。建议：</p><p>1、Vue Template 中 `v-on` 事件包装器不做声明，其它 `v-` 指令不做运算；</p><p>2、Method、Watch、Computed 等机制尽可能只充当“联络站”角色，相关的事件处理函数抽出放在服务中。</p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>建议将 UI 相关操作通过 DOM 规范和技术封装在服务中，然后采用 Vue Directive 机制关联，以实现对 DOM 的操作。</p><h4 id="VueX"><a href="#VueX" class="headerlink" title="VueX"></a>VueX</h4><p>如果有采用集中式的数据状态管理模式，亦然，仅将 VueX 这类数据状态库作为“组织”用，而不是“实现”。</p><h4 id="其它框架-库"><a href="#其它框架-库" class="headerlink" title="其它框架/库"></a>其它框架/库</h4><p>一个系统会采用许多第三方提供的服务，如 Moment.js 这类特定领域的服务，建议不要直接使用在我们系统中，而是依赖它封装一个业务系统中这类领域的服务，相当于做一个“适配”，即，<strong>我们系统只声明需要什么样的接口，而不关心这个接口具体的实现</strong>，这样为未来技术变迁提供可能。</p><h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>最终，这样分层之后，中上层薄，下层厚，各层解耦，代码结构得到优化，测试、维护和交接都较方便，同时也为复用、移植打下了基础 (复用不是目的是结果)。比如：</p><p>数据或数据处理出现异常，直接定位在服务层，步骤不对直接查验组织层。同理，协同对接时也能清晰的将各领域结构化的表达出来；另外，查阅代码时翻页量少了，各结构间逻辑也能较好的梳理，不乱。</p><p>当然，这里也会面临一些问题，如：层应该分几个层，粒度应该分多细。</p><p>我们先看一下 2010 年 AngularJS 框架的设计，数据相关部分 Providers 中有 Constant、Value、Factory、Service 等各种类型的分层，划分的粒度较细，后来 2016 年在 Angular 设计中，认为以前那样的设计概念过多，造成有关联性的领域被隔离，于是将所有数据、数据处理相关的操作都统一到了 “Service” 这一个概念中，更没有 config、constant、util 这类传统规划，我们提供的所有都是服务，供视图及用户交互消费；我是赞同这样处理的，在实践中发现，按<strong>领域及其各作用域</strong>进行拆分后，并不会造成服务的冗余和臃肿；也就是说，Vue、VueX 这类框架和库，仅起组织、调度作用，其它业务处理，不依赖这类框架和库而是独立在另外一个维度，这样做的好处是：</p><ul><li>开发者协作时，能明确知道，框架/库和业务各自所属、划分各自边界，能定位、专注某一层的处理，好开发，好阅读，好维护；</li><li>保持程序结构清晰、简短，不用一大坨杂糅，不用上下、来回寻找；</li><li>技术栈迭代或更换，只需在对应的层用新的实现替换原有的实现。</li></ul><p>最后，对象之间具有复杂的依赖性，管理这些对象充满了挑战，分层中抽取分离的过程不是一步能到位的，而是需要随着渐进明细的实际情况滚动式规划和进行，总之，分层，能做多少就是多少，不能不做。</p><hr><p>扩展阅读：</p><ul><li><a href="https://docs.microsoft.com/en-us/aspnet/core/mvc/overview">The Model-View-Controller (MVC) Pattern</a> | Microsoft Docs</li><li><a href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/ff649571(v=pandp.10)?redirectedfrom=MSDN">The Model-View-Presenter (MVP) Pattern</a> | Microsoft Docs</li><li><a href="https://docs.microsoft.com/en-us/previous-versions/msp-n-p/hh848246(v=pandp.10)?redirectedfrom=MSDN">The Model-View-ViewModel (MVVM) Pattern</a> | Microsoft Docs</li><li><a href="https://pan.ops.qianxin-inc.cn/s/joc64iJFQ3nAseH">DCI 架构：面向对象编程的新构想 (The DCI Architecture: A New Vision of Object-Oriented Programming)</a> / <a href="https://www.artima.com/articles/the-dci-architecture-a-new-vision-of-object-oriented-programming">原文</a></li><li><a href="https://www.infoq.cn/news/2009/05/dci-coplien-reenskau">DCI：James O. Coplien 和 Trygve Reenskau 提出的新架构方法</a> / <a href="https://www.infoq.com/news/2009/05/dci-coplien-reenskau/">原文</a></li><li><a href="https://www.infoq.cn/article/2015/03/bdd-ddd">行为驱动开发与领域驱动设计相结合 (Behaviour-Driven Development Combined with Domain-Driven Design)</a> / <a href="https://www.infoq.com/news/2015/02/bdd-ddd/">原文</a></li><li>  《领域驱动设计：软件核心复杂性应对之道》P48/4.3 模式：THE SMART UI “ANTI-PATTERN”</li><li>  《JavaScript 高级程序设计（第4版）》P220/8.2.2 工厂模式</li></ul>]]>
    </content>
    <summary type="html">&lt;p&gt;Vue 开发做分层架构。&lt;/p&gt;</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="web" scheme="https://xinlu.ink/tags/web/"/>
  </entry>
  <entry>
    <title>关于编辑器</title>
    <link href="https://xinlu.ink/tech/editor.html"/>
    <id>https://xinlu.ink/tech/editor.html</id>
    <published>2019-01-25T05:27:46.000Z</published>
    <updated>2019-01-25T05:35:33.839Z</updated>
    <content type="html">
      <![CDATA[<p>编辑器适合在计算机上从事生产活动用，不仅用于编码。</p><a id="more"></a><h2 id="前话"><a href="#前话" class="headerlink" title="前话"></a>前话</h2><p>我深度使用 Visual Studio Code 和 Sublime Text 3 这两个编辑器，主力 Visual Studio Code，配合使用 Sublime Text 3，稳定轻巧快速，得心应手。</p><p>IDE 用过 VS、JetBrains IDEA &amp; WebStorm、Eclipse；</p><p>弱集成、无集成编辑器用过 Dreamweaver、Brackets、Notepad++、Atom；</p><p>IDE 活好，尤其是引用追踪，比普通编辑器精准；当然 IDE <strong>消费、消耗</strong>也高；</p><p>Editor 不装扩展不调教和系统自带的文本编辑器没区别，装了扩展都是怪兽，这一点比 IDE 更为灵活和强大；</p><p>编辑器需要常常调教，日久生情难舍难分。</p><h2 id="调教思路"><a href="#调教思路" class="headerlink" title="调教思路"></a>调教思路</h2><p>调教就“三前提”、“两方向”和“一备份”：</p><ul><li>前提<ul><li>8G 以上内存</li><li>SSD 硬盘</li><li>安装扩展/插件</li></ul></li><li>方向<ul><li>配置(Settings)</li><li>快捷键(Shortcuts)</li></ul></li><li>备份<ul><li>备份调教信息，不同时空依然如旧(Sync)</li></ul></li></ul><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><p>编辑器社区会有大量的扩展资源，按需找扩展，我是按以下分类找的：</p><ul><li>语言编写支持</li><li>语法校验</li><li>注释</li><li>代码块</li><li>插入字符(insert 日期时间、数字…)</li><li>格式化文档</li><li>书签、标记与识别</li><li><strong>行、列、符号范围字符快速选择与操作</strong></li><li>文件对比，diff</li><li>文件名、路径</li><li>Markdown (文档标记语言，使用计算机必知必会)</li><li>Git (文档存储，使用计算机必知必会，推荐 Github、GitLab、Bitbucket 私有仓库)</li></ul><p>这里贴几个跟具体语言无关、通用的插件：</p><p>Visual Studio Code：书签 <a href="https://marketplace.visualstudio.com/items?itemName=alefragnani.Bookmarks" target="_blank" rel="noopener">Bookmarks</a>、彩色括号对 <a href="https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer" target="_blank" rel="noopener">Bracket Pair Colorizer</a>、命名方式 <a href="https://marketplace.visualstudio.com/items?itemName=wmaurer.change-case" target="_blank" rel="noopener">Change Case</a>、扩展选择 <a href="https://marketplace.visualstudio.com/items?itemName=letrieu.expand-region" target="_blank" rel="noopener">Expand Region</a>、范围选择 <a href="https://marketplace.visualstudio.com/items?itemName=dbankier.vscode-quick-select" target="_blank" rel="noopener">Quick and Simple Text Selection、Markdown Preview Enhanced</a>、<a href="https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight" target="_blank" rel="noopener">TODO Highlight</a>、<a href="https://marketplace.visualstudio.com/items?itemName=ryu1kn.partial-diff" target="_blank" rel="noopener">Partial Diff</a>、同步 <a href="https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a>。</p><p>Sublime Text 3：范围选择 <a href="https://packagecontrol.io/packages/ExpandRegion" target="_blank" rel="noopener">Expand​ Region</a>、命名方式 <a href="https://packagecontrol.io/packages/Case%20Conversion" target="_blank" rel="noopener">Case Conversion</a>、彩色括号对 <a href="https://packagecontrol.io/packages/BracketHighlighter" target="_blank" rel="noopener">BracketHighlighter</a>、删除空白行 <a href="https://packagecontrol.io/packages/DeleteBlankLines" target="_blank" rel="noopener">DeleteBlankLines</a>、文件对比 <a href="https://packagecontrol.io/packages/FileDiffs" target="_blank" rel="noopener">FileDiffs</a>、<a href="https://packagecontrol.io/packages/Markdown%20Extended" target="_blank" rel="noopener">Markdown Extended</a>、<a href="https://packagecontrol.io/packages/MarkdownPreview" target="_blank" rel="noopener">MarkdownPreview</a>、同步 <a href="https://packagecontrol.io/packages/Sync%20Settings" target="_blank" rel="noopener">Sync Settings</a>。</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>不要深度配置，避免工具和扩展功能调整带来影响：</p><ul><li>字体，<code>&#39;Source Code Variable&#39;,&#39;Ubuntu Mono&#39;</code></li><li>主题，要什么主题，顶多加个文件图标扩展</li><li>忽略某些文件</li><li>忽略某些文件夹</li></ul><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><p>快捷键算是调教中最重要的；</p><p>所有编辑器都存在快捷键泛滥的情况；</p><p>你们想想，你带着妹纸敲上了代码，写着脚本还调着样式，突然想来个骚操作可就怎么都不行了，所以，<strong>没有预设快捷键的扩展才是好扩展！甚至没有预设快捷键的编辑器才是真正的好编辑器</strong>。</p><p>配置快捷键之前，先了解一下计算机键盘，按用处可分为调节键(Modifier keys)、编辑键(Editing)、导航键(Navigation keys)、锁定键(Lock keys)、综合键(Contextual)等键位；</p><p>再了解一下 Alt、Ctrl、Shift <strong>调节键</strong>的功能：</p><ul><li>Alt (Alternate)，修饰键，切换，转换，侧重“动”，如：实现切换窗口、关闭当前应用程序、选择(访问)菜单等功能；</li><li>Ctrl (Control)，控制键，侧重“控”；</li><li>Shift 转换键，辅助控制键，范围获取键，侧重“辅助”(挂档)，如：字符选择，输入切换、字母大小写及数字字符转换。</li></ul><p>下面谈谈所有软件快捷键的配置方式：</p><ul><li>IDE 和 大型专业软件，不配置自定义快捷键，按它的方式操作；</li><li>有用 IDE 和 编辑器，可将编辑器的快捷键、配置调教成 IDE 的操作方式；</li><li>编辑器领域几个常用的按键不要被覆盖：<code>Ctrl+Shift+P</code>、<code>Ctrl+P</code>、<code>Ctrl+R</code>、<code>Ctrl+G</code>、<code>Ctrl+;</code>、<code>Ctrl+~</code>、<code>Ctrl+D</code>；</li><li>计算机领域几个常用的按键不要被覆盖：<code>Ctrl+A</code>/<code>C</code>/<code>V</code>/<code>X</code>/<code>F</code>/<code>H</code>/<code>N</code>/<code>O</code>/<code>P</code>/<code>Q</code>/<code>S</code>/<code>W</code>/<code>Z</code>，<code>F1</code>；</li><li>不可单独使用 <code>Shift</code> 按键；</li><li>不单独使用 <code>F1~F12</code> 功能键，编码类操作不用功能键，太大，一手无法掌控；</li><li>不要分配其它功能到 <code>F3</code>/查找、<code>F5</code>/构建、<code>F12</code>/定义引用 三个键；</li><li>不要分配其它功能到 Left、Right 导航键；</li><li>不使用 <code>Alt+字母</code> 按键，此操作通常访问菜单；</li><li>不要四键及以上触发</li></ul><p>定睛一看，留给我们用户可自定义的字母按键，没几个！二键触发日常使用几乎不可能实现了，想想 VIM 多任性，一键触发。</p><p>接下来再谈谈，编辑器中常用快捷键种类：</p><ul><li>编辑器窗口分屏、移动、聚焦；</li><li>代码类操作：行、关键字、定义引用定位跳转，书签跳转，提示，注释，行前行后插入编辑，缩进，折叠展开，格式化，调试断点，变量命名；</li><li>行、列、标签对上属性字符选择与操作；</li><li>文件和目录操作。</li></ul><p>差不多了，其它操作就 <code>Ctrl+Shift+P</code> 输入指令调用吧。</p><p>下面是我对编辑器快捷键的部分配置，这么多年用下来感觉比较便捷。</p><p>Visual Studio Code 中生效，<sup>(v)</sup>；</p><p>Sublime Text 3 中生效，<sup>(s)</sup>；</p><h3 id="编辑器通用指令"><a href="#编辑器通用指令" class="headerlink" title="编辑器通用指令"></a>编辑器通用指令</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>执行编辑器和插件的命令</td><td><code>Ctrl+Shift+P</code></td></tr><tr><td>定位文件</td><td><code>Ctrl+P</code></td></tr><tr><td>跳转到行(Line)</td><td><code>Ctrl+G</code></td></tr><tr><td>跳转到符号(Symbol)</td><td><code>Ctrl+R</code></td></tr><tr><td>列模式选择</td><td><code>Ctrl+D</code></td></tr><tr><td>行选择</td><td><code>Ctrl+L</code></td></tr></tbody></table><p><code>Ctrl+P</code>，输入<code>:</code> 转到行，输入<code>@</code> 转到符号(Symbol)；输入<code>@:</code> 转到符号(分类) <sup>(v)</sup></p><h3 id="书签"><a href="#书签" class="headerlink" title="书签"></a>书签</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>添加、取消书签</td><td><code>Ctrl+K+K</code></td></tr><tr><td>跳至下一书签</td><td><code>Ctrl+K+N</code></td></tr><tr><td>跳至上一书签</td><td><code>Ctrl+K+P</code></td></tr><tr><td>清除当前文档所有书签</td><td><code>Ctrl+K+C</code></td></tr><tr><td>当前文档所有书签</td><td><code>Ctrl+K+A</code></td></tr></tbody></table><h3 id="缩进和折叠"><a href="#缩进和折叠" class="headerlink" title="缩进和折叠"></a>缩进和折叠</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>缩</td><td><code>Ctrl+[</code></td></tr><tr><td>进</td><td><code>Ctrl+]</code></td></tr><tr><td>折叠当前层级</td><td><code>Ctrl+Shift+[</code></td></tr><tr><td>展开当前层级</td><td><code>Ctrl+Shift+]</code></td></tr><tr><td>折叠所有</td><td><code>Ctrl+K+0</code><sup>(v)</sup></td></tr><tr><td>层级折叠</td><td><code>Ctrl+K+1</code>-<code>7</code></td></tr><tr><td>展开所有</td><td><code>Ctrl+K+J</code></td></tr><tr><td>折叠 HTML 标签属性</td><td><code>Ctrl+K+T</code><sup>(s)</sup></td></tr><tr><td>折叠块级注释</td><td><code>Ctrl+K+/</code><sup>(v)</sup></td></tr></tbody></table><h3 id="变量命名方式"><a href="#变量命名方式" class="headerlink" title="变量命名方式"></a>变量命名方式</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td><code>change_case</code> snake</td><td><code>Ctrl+U+S</code></td></tr><tr><td><code>change-case</code> kebab</td><td><code>Ctrl+U+K</code></td></tr><tr><td><code>changeCase</code> camel</td><td><code>Ctrl+U+C</code></td></tr><tr><td><code>ChangeCase</code> pascal</td><td><code>Ctrl+U+P</code></td></tr><tr><td><code>CHANGE_CASE</code> screaming_snake(constant)</td><td><code>Ctrl+U+U</code></td></tr><tr><td><code>change.case</code> dot</td><td><code>Ctrl+U+D</code></td></tr><tr><td><code>change/case</code> slash(path)</td><td><code>Ctrl+U+/</code></td></tr><tr><td><code>change case</code> separate words</td><td><code>Ctrl+U+W</code></td></tr><tr><td><code>Change Case</code> title</td><td><code>Ctrl+U+T</code><sup>(v)</sup></td></tr></tbody></table><h3 id="强大的选择功能"><a href="#强大的选择功能" class="headerlink" title="强大的选择功能"></a>强大的选择功能</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>列模式选择所有项</td><td><code>Alt+F3</code></td></tr><tr><td>列模式选择</td><td><code>Ctrl+Shift+↑</code>/<code>↓</code></td></tr><tr><td>复制内容到上/下一位置</td><td><code>Alt+Shift+↑</code>/<code>↓</code></td></tr><tr><td>向内(inner)、外(outer)选择</td><td><code>Alt+Shift+I</code>/<code>O</code></td></tr><tr><td>扩展选择至 行(line)</td><td><code>Ctrl+E+L</code><sup>(s)</sup></td></tr><tr><td>扩展选择至 括号对(brackets)</td><td><code>Ctrl+E+B</code><sup>(s)</sup></td></tr><tr><td>扩展选择至 同层级(indentation)</td><td><code>Ctrl+E+I</code><sup>(s)</sup></td></tr><tr><td>扩展选择至 同标签(tag)</td><td><code>Ctrl+E+T</code><sup>(s)</sup></td></tr><tr><td>扩展选择至 同作用域(scope)</td><td><code>Ctrl+E+S</code><sup>(s)</sup></td></tr><tr><td>扩展选择至 同段落(paragraph)</td><td><code>Ctrl+E+P</code><sup>(s)</sup></td></tr><tr><td>删除行</td><td><code>Ctrl+Shift+K</code></td></tr><tr><td>扩展选择至 <code>( )</code></td><td><code>Alt+Shift+(</code><sup>(v)</sup></td></tr><tr><td>扩展选择至 <code>[ ]</code></td><td><code>Alt+Shift+[</code><sup>(v)</sup></td></tr><tr><td>扩展选择至 <code>&lt; &gt;</code></td><td><code>Alt+Shift+&lt;</code><sup>(v)</sup></td></tr><tr><td>扩展选择至 <code>&#39; &#39;</code>、<code>&quot; &quot;</code></td><td><code>Alt+Shift+&#39;</code><sup>(v)</sup></td></tr><tr><td>扩展选择至 ` `</td><td><code>Alt+Shift+`</code><sup>(v)</sup></td></tr><tr><td>扩展选择至 <code>{ }</code></td><td><code>Ctrl+Alt+Shift+{</code><sup>(v)</sup></td></tr></tbody></table><h3 id="编辑器容器"><a href="#编辑器容器" class="headerlink" title="编辑器容器"></a>编辑器容器</h3><p>编辑器它是这样的：窗口器/Window → 组/Group → 编辑器/Editor → 文件/File。</p><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>新建文件</td><td><code>Ctrl+N</code></td></tr><tr><td>新建窗口</td><td><code>Ctrl+Shift+N</code></td></tr><tr><td>打开文件</td><td><code>Ctrl+O</code></td></tr><tr><td>打开文件夹</td><td><code>Ctrl+Shift+O</code></td></tr><tr><td>在新窗口打开当前文件</td><td><code>Ctrl+Alt+Shift+O</code><sup>(v)</sup></td></tr><tr><td>关闭当前文件</td><td><code>Ctrl+W</code></td></tr><tr><td>关闭所有编辑器</td><td><code>Ctrl+K+W *</code></td></tr><tr><td>退出当前程序</td><td><code>Ctrl+Shift+W</code><sup>(v)</sup></td></tr><tr><td>资源管理器打开文件所在位置</td><td><code>Alt+X</code></td></tr><tr><td>菜单栏显示隐藏 Toggle</td><td><code>Ctrl+T+M</code></td></tr><tr><td>状态栏显示隐藏</td><td><code>Ctrl+T+S</code></td></tr><tr><td>侧边栏显示隐藏</td><td><code>Ctrl+B</code></td></tr><tr><td>打开或关闭命令终端</td><td><code>Ctrl+~</code></td></tr></tbody></table><h3 id="分屏-组-与移动"><a href="#分屏-组-与移动" class="headerlink" title="分屏(组)与移动"></a>分屏(组)与移动</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>分屏</td><td><code>Ctrl+\</code></td></tr><tr><td>撤销分屏</td><td><code>Ctrl+Shift+\</code></td></tr><tr><td>聚焦左/右一文件</td><td><code>Ctrl+PageUp/PageDown</code></td></tr><tr><td>文件组内左/右移</td><td><code>Ctrl+Alt+PageUp</code>/<code>PageDown</code><sup>(v)</sup></td></tr><tr><td>文件移至上、下一组</td><td><code>Ctrl+Shift+PageUp</code>/<code>PageDown</code></td></tr><tr><td>组左、右移</td><td><code>Alt+Shift+PageUp</code>/<code>PageDown</code><sup>(v)</sup></td></tr><tr><td>聚焦第1-9个文件</td><td><code>Alt+1</code>-<code>9</code></td></tr><tr><td>聚焦第1-9组</td><td><code>Ctrl+1</code>-<code>9</code></td></tr><tr><td>聚焦侧边栏</td><td><code>Ctrl+0</code></td></tr><tr><td>文件移至第1至9组</td><td><code>Ctrl+Shift+1</code>-<code>9</code><sup>(s)</sup></td></tr><tr><td>分屏</td><td><code>Alt+Shift+1</code>/<code>2</code>(水平)/<code>3</code>/<code>4</code>/<code>5</code>(四宫格)/<code>8</code>(2个垂直)/<code>9</code>(3个垂直) <sup>(s)</sup></td></tr><tr><td>垂直、水平方向分屏(Layout)</td><td><code>Shift+Alt+L</code><sup>(v)</sup></td></tr></tbody></table><h3 id="编辑器内置指令"><a href="#编辑器内置指令" class="headerlink" title="编辑器内置指令"></a>编辑器内置指令</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>光标在括号对前后移动(Brackets)</td><td><code>Ctrl+M+B</code></td></tr><tr><td>光标在标签对前后移动(Tag)</td><td><code>Ctrl+M+T</code></td></tr><tr><td>查看定义(Definition)</td><td><code>F12</code></td></tr><tr><td>查看引用(Reference)</td><td><code>Shift+F12</code></td></tr><tr><td>整个工程中的 Symbol</td><td><code>Ctrl+Shift+R</code></td></tr><tr><td>上一 Symbol</td><td><code>Shift+F7</code><sup>(v)</sup></td></tr><tr><td>下一 Symbol</td><td><code>F7</code><sup>(v)</sup></td></tr><tr><td>字符换行 Word Wrap</td><td><code>Alt+z</code></td></tr><tr><td>全屏</td><td><code>F11</code></td></tr></tbody></table><h3 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>HTML 标签、CSS 选择器前、后选择“属性、值”</td><td><code>Alt+&lt;</code>/<code>&gt;</code></td></tr><tr><td>HTML 中上、下一编辑点</td><td><code>Ctrl+Alt+&lt;</code>/<code>&gt;</code></td></tr><tr><td>HTML 中向层级内、外选择</td><td><code>Alt+Shift+-</code>/<code>=</code></td></tr><tr><td>HTML 添加包裹标签</td><td><code>Ctrl+Shift+G</code></td></tr><tr><td>HTML 更新标签</td><td><code>Ctrl+Shift+;</code></td></tr><tr><td>HTML 移除标签</td><td><code>Ctrl+Shift+&quot;</code></td></tr><tr><td>太多…</td></tr></tbody></table><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><table><thead><tr><th>Fn</th><th>Key</th></tr></thead><tbody><tr><td>触发建议</td><td><code>Alt+/</code></td></tr><tr><td>触发建议细节</td><td><code>Ctrl+Alt+/</code></td></tr><tr><td>触发参数提示</td><td><code>Ctrl+Shift+Alt+/</code></td></tr><tr><td>预览Markdown</td><td><code>Ctrl+K+V</code><sup>(v)</sup></td></tr></tbody></table><hr><p><a href="http://link.zhihu.com/?target=https%3A//code.visualstudio.com/" target="_blank" rel="noopener">Visual Studio Code</a> 可安装 <a href="http://link.zhihu.com/?target=https%3A//marketplace.visualstudio.com/items%3FitemName%3DShan.code-settings-sync" target="_blank" rel="noopener">Settings Sync</a> 同步 “gist_id”: “5f0eb9482b96be16eb6865cbc7728d29”;</p><p><a href="http://link.zhihu.com/?target=http%3A//sublimetext.com/" target="_blank" rel="noopener">Sublime Text 3</a> 可安装 <a href="http://link.zhihu.com/?target=https%3A//packagecontrol.io/packages/Sync%2520Settings" target="_blank" rel="noopener">Sync Settings</a> 同步 “gist_id”: “22d1bb9a4e2deb93fc772542ad15433c”;</p><p><a href="https://pan.baidu.com/s/1TItZc90LQTOSlqaIhyAdWQ" target="_blank" rel="noopener">字体：Share/Font/Source-Code-Pro.zip</a> 提取码：1024</p>]]>
    </content>
    <summary type="html">&lt;p&gt;编辑器适合在计算机上从事生产活动用，不仅用于编码。&lt;/p&gt;</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="editor" scheme="https://xinlu.ink/tags/editor/"/>
  </entry>
  <entry>
    <title>Adobe XD 操作</title>
    <link href="https://xinlu.ink/tech/adobe-xd.html"/>
    <id>https://xinlu.ink/tech/adobe-xd.html</id>
    <published>2019-01-03T06:46:50.000Z</published>
    <updated>2019-01-03T08:21:52.791Z</updated>
    <content type="html">
      <![CDATA[<p>Adobe XD ，简单、优雅，功能介于 Axure 和 Sketch 之间，既能 Prototype 又能 UI。</p><p>目前 14.0.42.14 版本，更多功能实现是 UI 设计，原型交互效果这部分不及 <a href="https://www.flinto.com/" target="_blank" rel="noopener">Flinto</a>、<a href="http://principleformac.com/" target="_blank" rel="noopener">Principle</a>、<a href="https://www.protopie.io/" target="_blank" rel="noopener">ProtoPie</a>这类工具，Adobe XD 基础部分已经夯实，Apple、巨硬 Fluent、Google Materail 几个大厂已经有 XD 资源包，加上免费策略，应该是设计界的 Visual Studio Code，冉冉新星。</p><a id="more"></a><ul><li>了解 “画布”、“图层”、“对象”、“编组”、“路径”、“锚点” 等图形处理术语；</li><li>工具箱按键：选择(V)、矩形(R)、椭圆形(E)、线条(L)、画笔(P)、文字(T)、画布(A)、缩放(Z)</li><li>滚动视图：按住 <code>Space/空格</code> 键，抓手工具，以滚动视图；按住 <code>Shift+鼠标滚轮</code>，左右滚动视图；</li><li>缩放：<ul><li>按住 <code>Ctrl+Shift+鼠标滚轮</code>，快速缩放；好用</li><li>按一下 <code>Z</code> 键，点击、拖动<code>放大</code>；按住 <code>Alt</code> 键不放，点击、拖动<code>缩小</code>；难用</li><li>视图辅助用按键: <code>Ctrl+0/1/2/3/-/+</code> 对应 <code>所有/100%/200%/当前选择画布/缩小/放大</code></li></ul></li><li>选择： <code>Shift</code> 加左键点击挑选多个对象；按住左键拖，范围内选择多个图层；</li><li>绘制/调整对象大小<ul><li>按 <code>Shift</code> 键，从对象“左上”保持宽高比</li><li>按 <code>Alt+Shift</code> 键，从对象“中心”保持宽高比</li><li>按 <code>Alt</code> 键，从对象“中心”对称调整</li></ul></li><li>复制：<code>Alt + 左键拖</code>，复制图层；<code>Alt+Shift+左键拖</code>，限定方向复制图层； <code>Ctrl+D</code> 再制；</li><li>移动：按 <code>Shift</code> 键可限定方向移动对象；按 <code>Shift+↑↓←→</code> 以每 <code>10px</code> 单位移动对象；按 <code>Ctrl+Shift+↑↓←→</code> 将对象移至画布最边上；</li><li>旋转：按 <code>Shift</code> 键以每 <code>15°</code> 旋转对象；一般加 <code>Shift</code> 上档键可视为约束操作；</li><li>对齐、分布：选中对象，点右侧“对齐”面板图标实现各种对齐和分布；</li><li>层次排列: <code>Ctrl+[</code>/<code>Ctrl+]</code>，图层后/前移一层，加一个 <code>Shift</code> 就是移至“底/顶”；</li><li>编组： 对图层进行编组，为了维护、复用、导出；选择对象，鼠标右键→“Group”/<code>Ctrl+G</code>；</li><li>锁定： 做完防止手误移动，可 鼠标右键→“Lock”/<code>Ctrl+L</code> 锁定对象；</li><li>Symbols：组件化，对一个/组对象 鼠标右键→“Make Symbols”/<code>Ctrl+K</code>，在左侧工具栏下方 “Assets” 面板中，可以看到这个 Symbols，可以拖入画板复用；</li><li>色卡：选择“颜色”时候，确定了要用这个色彩，就点一下 “+” Save Color Swatch，将常用的色彩保存到色卡；</li><li>色彩资源：选中一个对象，鼠标右键→“Add Color to Assets”/<code>Shift+Ctrl+C</code>，或在 “Assets” 面板， “Colors” 面板点 “+”，将颜色参数化；对应项鼠标右键→“Edit”，可以统一调整；</li><li>文字资源：选中一个文本对象，鼠标右键→“Add Character Styles to Assets”/<code>Shift+Ctrl+T</code>，或在 “Assets” 面板， “Character Styles” 面板点 “+”，将文字排版参数化；对应项鼠标右键→“Edit”，可以统一调整；</li><li>蒙版遮盖：先 <code>Ctrl+Shift+i</code> 导入一张图形素材(后)，再画一个形状用作蒙版(前)，选中这两个对象，鼠标右键→“Mask With Shape”/<code>Ctrl+Shift+M</code>，将图形嵌入形状中，双击进入可拖动图形位置；鼠标右键→“Ungroup Mask”/<code>Ctrl+Shift+G</code> 可取消遮罩；</li><li>重复网格：选中一个/组对象，右侧操作面板 “Repeat Grid” ，拖动以重复；</li><li>透明度：1 = 10％，2 = 20％，… 0 = 100%；</li><li>布尔运算组合对象：两个形状，可以进行 “Add”、“Subtract/减去顶层”、“Intersect/相交”、“Exclude Overlap/排除重叠”；取消编组可复原；</li><li>锚点<ul><li>双击形状，<code>BackSpace</code> 键可删除路径中选中的锚点，用以生成绘制其它形状</li><li>双击锚点，在曲线和角度之间切换</li><li>按 <code>Alt</code> 键拖动曲线手柄，可控制手柄范围</li></ul></li><li>画布，点击标题可选择；按住 <code>Shift</code> 可选择多个，可进行移动、对齐操作；<code>Ctrl+D</code>可再制画布；</li><li>导出：可将画布、对象导出为各种格式图形文档；</li><li>原型设计和预览：就是加页面之间的跳转与过渡效果，自己点点点琢磨一下；</li><li><strong>边做边保存</strong>，习惯性按 <code>Ctrl+S</code>，这应该是计算机上操作所有软件的习惯。</li></ul><p><img src="https://i.loli.net/2019/01/03/5c2daddbaf376.png" alt="Adobe XD"></p><hr><ul><li><a href="https://pan.baidu.com/s/1p2TldK-wEfK8BFFxmJfv2Q" target="_blank" rel="noopener">示例文件</a></li><li><a href="https://helpx.adobe.com/cn/xd/user-guide.html" target="_blank" rel="noopener">Adobe XD 用户指南</a></li></ul>]]>
    </content>
    <summary type="html">&lt;p&gt;Adobe XD ，简单、优雅，功能介于 Axure 和 Sketch 之间，既能 Prototype 又能 UI。&lt;/p&gt;
&lt;p&gt;目前 14.0.42.14 版本，更多功能实现是 UI 设计，原型交互效果这部分不及 &lt;a href=&quot;https://www.flinto.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flinto&lt;/a&gt;、&lt;a href=&quot;http://principleformac.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Principle&lt;/a&gt;、&lt;a href=&quot;https://www.protopie.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ProtoPie&lt;/a&gt;这类工具，Adobe XD 基础部分已经夯实，Apple、巨硬 Fluent、Google Materail 几个大厂已经有 XD 资源包，加上免费策略，应该是设计界的 Visual Studio Code，冉冉新星。&lt;/p&gt;</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="design" scheme="https://xinlu.ink/tags/design/"/>
  </entry>
  <entry>
    <title>也致第一次安装Rime的你</title>
    <link href="https://xinlu.ink/tech/rime.html"/>
    <id>https://xinlu.ink/tech/rime.html</id>
    <published>2018-03-13T11:26:06.000Z</published>
    <updated>2019-10-29T02:34:22.704Z</updated>
    <content type="html">
      <![CDATA[<p>我的需求是需要一套跨平台的输入方案:</p><p>因此，我选择了 <a href="http://rime.im/" target="_blank" rel="noopener">Rime</a>。</p><a id="more"></a><h2 id="0、安装"><a href="#0、安装" class="headerlink" title="0、安装"></a>0、安装</h2><p>先按系统平台安装Rime，本笔记以<strong>Windows平台/五笔输入方案</strong>为例 (<a href="https://pan.baidu.com/s/1TItZc90LQTOSlqaIhyAdWQ" target="_blank" rel="noopener">配置下载</a>，提取码 1024.)：</p><p>下载安装<a href="http://rime.im/download/" target="_blank" rel="noopener">小狼毫 Weasel</a>和<a href="https://code.visualstudio.com/" target="_blank" rel="noopener">编辑器 visual studio code</a>。<small>保证文件UTF-8编码</small></p><p>安装Rime之后，有默认的预置输入方案，各输入方案切换初始快捷键是<code>Ctrl+~</code>。</p><p>如果没有适合自己的输入方案，看完本笔记第2、3、4章节后，在浏览器中打开<a href="https://github.com/rime/plum" target="_blank" rel="noopener">Plum</a>项目，<code>Ctrl+F</code>查找并下载相关输入方案到<strong>用户配置目录</strong>，<strong>重新部署</strong>。</p><p>如：查找<code>wubi</code>，打开<a href="https://github.com/rime/rime-wubi" target="_blank" rel="noopener">rime-wubi</a>项目，点绿色按钮<code>Download ZIP</code>到桌面解压，把几个<code>*.yaml</code>后缀文件剪切到<code>%appdata%\Rime</code><small>(复制，<code>Windows+R</code>运行中粘贴回车即可进入)</small> 目录，重新部署。</p><p>Plum 是 Rime 配置管理器和输入模式库。</p><h2 id="1、认识“Rime”"><a href="#1、认识“Rime”" class="headerlink" title="1、认识“Rime”"></a>1、认识“Rime”</h2><p>要配置和操控 Rime，首先要知道它是什么，</p><p>Rime：</p><ul><li><p>一套<strong>文字输入解决方案</strong>，由基础引擎<sup>*</sup>、跨操作平台发行<sup>*</sup>、多种输入方案<sup>*</sup>组成，</p></li><li><p>支持“拼音、双拼、注音、声调、五笔、仓颉”等<strong>音码</strong>和<strong>形码</strong>输入；</p></li><li><p>支持“吴语、粤语，中古汉语”等多种方言拼音；</p></li><li><p>支持 Windows、Linux、Android、Mac OS X 等作业平台。</p><ul><li><a href="https://github.com/rime/home/wiki/RimeWithIBus" target="_blank" rel="noopener">ibus-rime</a> → Linux</li><li><a href="https://bintray.com/rime/weasel/release" target="_blank" rel="noopener">Weasel/小狼毫</a> → Windows</li><li><a href="https://bintray.com/lotem/rime/Squirrel" target="_blank" rel="noopener">Squirrel/鼠须管</a> → Mac OS X</li><li><a href="https://github.com/osfans/trime" target="_blank" rel="noopener">同文輸入法</a> → Android</li></ul></li><li><p>繁体拼音能正确的输入繁体字。</p></li></ul><p>上面有标<sup>*</sup>号几个部分，就是我们要配置调教的部分。</p><h2 id="2、认识“部署”与“同步”"><a href="#2、认识“部署”与“同步”" class="headerlink" title="2、认识“部署”与“同步”"></a>2、认识“部署”与“同步”</h2><p>每当更改了配置文件，就要进行一次<strong>部署</strong>以生效预期功能，同时执行一次<strong>同步</strong>以备份相关配置。</p><p>Windows 部署：</p><ul><li><p>在开始菜单中找到 <code>小狼毫輸入法 → 【小狼毫】重新部署</code>，执行即生效；</p></li><li><p>在<code>C:\ProgramData\Microsoft\Windows\Start Menu\Programs\小狼毫輸入法</code> 中执行 <code>【小狼毫】重新部署</code>；</p></li><li><p>如果配置中有开启托盘图标，右键选择<code>重新部署</code>。</p></li></ul><p>其它保作系统更简单，如iBus在输入法切换下拉菜单即可<code>部署</code>，鼠鬚管在系统语言文字选单中选择<code>重新部署</code></p><p>同步亦然，这里同步只是根据用户配置目录<code>installation.yaml</code>中的<code>installation_id</code>和<code>sync_dir</code>生成了配置和词典文件，至于同步之后备份在何处，是需要用户自己安排的，如各SaaS厂商的云盘。</p><h2 id="3、认识“源文件目录”和“用户配置目录”"><a href="#3、认识“源文件目录”和“用户配置目录”" class="headerlink" title="3、认识“源文件目录”和“用户配置目录”"></a>3、认识“源文件目录”和“用户配置目录”</h2><p>“源文件目录”和“用户配置目录”是整个输入方案的配置文件所在目录。</p><p>输入方案<strong>源文件目录</strong>，升级或重装会被替换，用户不能修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">【中州韻】 /usr/share/rime-data/</span><br><span class="line">【小狼毫】 &quot;安装目录\data&quot;</span><br><span class="line">【鼠鬚管】 &quot;/Library/Input Methods/Squirrel.app/Contents/SharedSupport/&quot;</span><br></pre></td></tr></table></figure></p><p>输入方案<strong>用户配置目录</strong>，用户可以部分修改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">【中州韻】 ~/.config/ibus/rime/</span><br><span class="line">          ~/.config/fcitx/rime/</span><br><span class="line">【小狼毫】 &quot;%appdata%\Rime&quot;</span><br><span class="line">【鼠鬚管】 ~/Library/Rime/</span><br></pre></td></tr></table></figure></p><h2 id="4、认识“用户配置目录”数据文件分布"><a href="#4、认识“用户配置目录”数据文件分布" class="headerlink" title="4、认识“用户配置目录”数据文件分布"></a>4、认识“用户配置目录”数据文件分布</h2><p>数据文件和目录在各版本中可能会有不同。</p><ul><li><p>主要文件</p><ul><li><code>default.yaml</code>，全局设定</li><li><code>weasel.yaml</code>，发行版设定</li><li><code>installation.yaml</code>，安装信息(可配置同步目录)</li><li><code>user.yaml</code>，用户状态信息</li><li><code>*.schema.yaml</code>，输入方案</li><li><code>*.dict.yaml</code>，输入方案配套的词典源文件</li><li><code>*.custom.yaml</code><sup>+</sup>，用户对Rime全局配置、各输入方案配置、自制输入方案等定制文件</li></ul></li><li><p>用户配置同步目录及词典文件</p><ul><li><code>*.userdb</code>，Rime记录用户输入习惯的目录文件</li><li><code>UUID/</code>，用户配置同步目录</li><li><code>UUID/*.userdb.txt</code>，Rime生成的用以同步的用户词典</li></ul></li><li><p>Rime编译生成的二进制文件：</p><ul><li><code>build/*</code></li><li><code>*.prism.bin</code>，棱镜文件</li><li><code>*.reverse.bin</code>，反查词典</li><li><code>*.table.bin</code>，固态词典</li></ul></li></ul><h2 id="5、折腾"><a href="#5、折腾" class="headerlink" title="5、折腾"></a>5、折腾</h2><p>要折腾的不是很多，普通用户安装即用，我折腾它主要是按键部分和我开发工具冲突，还有增强输入方案。</p><p>我们要配置四个文件，因为以后要升级，不能直接在原作者默认文件内修改和调整，所以要这样建立文件关联：</p><ul><li><strong>基础引擎框架配置 <code>default.yaml</code></strong> → <code>default.custom.yaml</code>，输入法按键、方案预选等全局设定</li><li><strong>输入方案配置 <code>wubi86.schema.yaml</code></strong> → <code>wubi86.custom.yaml</code>，每种形码、音码输入方案都可以单独配置</li><li><strong>增强输入方案配置 <code>symbols.yaml</code></strong> → <code>symbols.custom.yaml</code>，如： /jq 将调用二十四节气名</li><li><strong>Windows发行版配置 <code>weasel.yaml</code></strong> → <code>weasel.custom.yaml</code>，如进入相关应用程序，转换为英文状态</li></ul><p>我进行的配置有：</p><ul><li><code>Control+Alt+F8</code> 调出输入方案设定，原来的 <code>Ctrl+`</code> 会与大部分软件的关键按键冲突</li><li><code>,</code>、<code>.</code>输入时左右翻页</li><li><code>Enter</code>清屏，<code>;</code>、<code>&#39;</code>，输入时第二、三候选词选定</li><li>因为经常编码和用Markdown语法，很多字符为英文状态下字符，如<code>[]()</code>等</li><li><code>/</code>用来触发特殊字符输入，如<code>/fh</code>、<code>/0~9</code>、<code>/jt</code>等，具体参考<code>symbols.custom.yaml</code>文件</li><li><code>Shift+Delete</code> 或 <code>Control+Delete</code>（Mac <code>Shift+Fn+Delete</code>）删除候选词</li></ul><h3 id="5-1-目的"><a href="#5-1-目的" class="headerlink" title="5.1 目的"></a>5.1 目的</h3><ul><li>覆盖原默认配置</li><li>选择和扩展功能</li></ul><h3 id="5-2-调教"><a href="#5-2-调教" class="headerlink" title="5.2 调教"></a>5.2 调教</h3><ul><li>先三分钟了解一下 <a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">yaml</a> 配置文件语言</li><li>打开配置目录：Windows + R : <code>$ %appdata%/rime</code></li><li>用 VS Code 编辑器新建四个文件：<code>default.custom.yaml</code>，<code>wubi86.custom.yaml</code>，<code>symbols.custom.yaml</code>，<code>weasel.custom.yaml</code>，这四个文件配置完可以备份一份，方便在其它计算机上用。</li></ul><h4 id="5-2-1-基础引擎框架配置-：default-custom-yaml"><a href="#5-2-1-基础引擎框架配置-：default-custom-yaml" class="headerlink" title="5.2.1 基础引擎框架配置 ：default.custom.yaml"></a>5.2.1 基础引擎框架配置 ：default.custom.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此文档是对 rime 基础引擎框架配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">customization:</span></span><br><span class="line"><span class="attr">  distribution_code_name:</span><span class="string">Weasel</span></span><br><span class="line"><span class="attr">  distribution_version:</span><span class="number">0.9</span><span class="number">.30</span></span><br><span class="line"><span class="attr">  generator:</span><span class="string">"Rime::SwitcherSettings"</span></span><br><span class="line"><span class="attr">  modified_time:</span><span class="string">"Mon Mar 12 14:30:01 2018"</span></span><br><span class="line"><span class="attr">  rime_version:</span><span class="number">1.3</span><span class="number">.0</span></span><br><span class="line"></span><br><span class="line"><span class="attr">patch:</span></span><br><span class="line"><span class="string">"translator/enable_user_dict"</span><span class="string">:</span><span class="literal">false</span><span class="comment"># 关闭用户词典和字频调整</span></span><br><span class="line"><span class="string">"translator/enable_sentence"</span><span class="string">:</span><span class="literal">false</span><span class="comment"># 关闭码表输入法连打</span></span><br><span class="line"><span class="string">"key_binder/bindings"</span><span class="string">:</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;accept:</span><span class="string">"Control+Shift+space"</span><span class="string">,</span><span class="attr">toggle:</span><span class="string">full_shape,</span><span class="attr">when:</span><span class="string">always&#125;</span><span class="comment"># 全半角切换</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;accept:</span><span class="string">"Control+period"</span><span class="string">,</span><span class="attr">toggle:</span><span class="string">ascii_punct,</span><span class="attr">when:</span><span class="string">always&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;accept:</span><span class="string">comma,</span><span class="attr">send:</span><span class="string">Page_Up,</span><span class="attr">when:</span><span class="string">paging&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;accept:</span><span class="string">period,</span><span class="attr">send:</span><span class="string">Page_Down,</span><span class="attr">when:</span><span class="string">has_menu&#125;</span></span><br><span class="line"><span class="string">"ascii_composer/switch_key"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    Caps_Lock:</span><span class="string">commit_code</span></span><br><span class="line"><span class="attr">    Control_L:</span><span class="string">inline_ascii</span></span><br><span class="line"><span class="attr">    Control_R:</span><span class="string">noop</span></span><br><span class="line"><span class="attr">    Shift_L:</span><span class="string">commit_code</span><span class="comment"># 左右Shift上屏编码并切换为英文状态，inline_ascii 设定在有输入时不能切换至英文状态</span></span><br><span class="line"><span class="attr">    Shift_R:</span><span class="string">commit_code</span><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 原来的 Ctrl + ` 会与大部分软件的关键按键冲突</span></span><br><span class="line"><span class="string">"switcher/hotkeys"</span><span class="string">:</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">"Control+Shift+F8"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 除了输入翻页，应该取消所有的默认快捷鍵，输入法就是纯粹的输入用，用户按需分配快捷键，设定默认快捷键会与作业系统及其它软件产生冲突，适得其反，这样与用搜狐、腾讯输入法无二。</span></span><br><span class="line"><span class="comment"># minus/减号，equal/等号，comma/逗号，period/句号，exclam/感叹号，numbersign/井号，percent/百分号，semicolon/分号，apostrophe/单引号</span></span><br><span class="line"><span class="string">key_binder/bindings:</span></span><br><span class="line"><span class="comment"># hotkey switch</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">always,</span><span class="attr">accept:</span><span class="string">Shift+space,</span><span class="attr">toggle:</span><span class="string">full_shape</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">always,</span><span class="attr">accept:</span><span class="string">Control+period,</span><span class="attr">toggle:</span><span class="string">ascii_punct</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">accept:</span><span class="string">comma,</span><span class="attr">send:</span><span class="string">Page_Up,</span><span class="attr">when:</span><span class="string">paging</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">accept:</span><span class="string">period,</span><span class="attr">send:</span><span class="string">Page_Down,</span><span class="attr">when:</span><span class="string">has_menu</span><span class="string">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 选定五笔等输入方案</span></span><br><span class="line"><span class="attr">  schema_list:</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">wubi86&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">wubi_pinyin&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">wubi_trad&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">luna_pinyin_simp&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">luna_pinyin_tw&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;schema:</span><span class="string">terra_pinyin&#125;</span></span><br></pre></td></tr></table></figure><h4 id="5-2-2-输入法配置-：wubi86-custom-yaml"><a href="#5-2-2-输入法配置-：wubi86-custom-yaml" class="headerlink" title="5.2.2 输入法配置 ：wubi86.custom.yaml"></a>5.2.2 输入法配置 ：wubi86.custom.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此文档是对输入法的配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">patch:</span></span><br><span class="line"><span class="comment"># 标点及特殊表情，引入 symbols.custom.yaml 文件，设定触发条件</span></span><br><span class="line"><span class="string">'punctuator/import_preset'</span><span class="string">:</span><span class="string">symbols.custom</span></span><br><span class="line"><span class="string">'recognizer/patterns/punct'</span><span class="string">:</span><span class="string">"^/([a-z]+|[0-9])$"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 1.回车清屏(Escape)/上屏一候选词，2.分号上屏二候选词，3.引号上屏三候选词</span></span><br><span class="line"><span class="string">"key_binder/bindings"</span><span class="string">:</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">composing,</span><span class="attr">accept:</span><span class="string">Return,</span><span class="attr">send:</span><span class="string">Escape</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">has_menu,</span><span class="attr">accept:</span><span class="string">Return,</span><span class="attr">send:</span><span class="string">Escape</span><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># - &#123;when: composing, accept: space, send: Escape&#125;</span></span><br><span class="line"><span class="comment"># - &#123;when: has_menu, accept: space, send: space&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">has_menu,</span><span class="attr">accept:</span><span class="string">semicolon,</span><span class="attr">send:</span><span class="number">2</span><span class="string">&#125;</span></span><br><span class="line"><span class="bullet">    -</span><span class="string">&#123;</span><span class="attr">when:</span><span class="string">has_menu,</span><span class="attr">accept:</span><span class="string">apostrophe,</span><span class="attr">send:</span><span class="number">3</span><span class="string">&#125;</span></span><br><span class="line"><span class="comment"># 更改‘西文’为‘英文’，‘增广’为‘扩展集’</span></span><br><span class="line"><span class="attr">  switches:</span></span><br><span class="line"><span class="attr">  - name:</span><span class="string">ascii_mode</span></span><br><span class="line"><span class="attr">    reset:</span><span class="number">0</span></span><br><span class="line"><span class="attr">    states:</span><span class="string">["中文",</span><span class="string">"英文"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - name:</span><span class="string">full_shape</span></span><br><span class="line"><span class="attr">    states:</span><span class="string">["半角",</span><span class="string">"全角"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - name:</span><span class="string">ascii_punct</span></span><br><span class="line"><span class="attr">    states:</span><span class="string">["，。",</span><span class="string">"，．"</span><span class="string">]</span></span><br><span class="line"><span class="attr">  - name:</span><span class="string">extended_charset</span></span><br><span class="line"><span class="attr">    states:</span><span class="string">["通用",</span><span class="string">"扩展集"</span><span class="string">]</span></span><br></pre></td></tr></table></figure><h4 id="5-2-3-Windows操作平台配置：weasel-custom-yaml"><a href="#5-2-3-Windows操作平台配置：weasel-custom-yaml" class="headerlink" title="5.2.3 Windows操作平台配置：weasel.custom.yaml"></a>5.2.3 Windows操作平台配置：weasel.custom.yaml</h4><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 此文档是对rime在Windows平台上的配置</span></span><br><span class="line"></span><br><span class="line"><span class="attr">customization:</span></span><br><span class="line"><span class="attr">  distribution_code_name:</span><span class="string">Weasel</span></span><br><span class="line"><span class="attr">  distribution_version:</span><span class="number">0.9</span><span class="number">.30</span></span><br><span class="line"><span class="attr">  generator:</span><span class="string">"Weasel::UIStyleSettings"</span></span><br><span class="line"><span class="attr">  modified_time:</span><span class="string">"Fri Mar 09 15:08:29 2018"</span></span><br><span class="line"><span class="attr">  rime_version:</span><span class="number">1.1</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入相关应用程序，转换为英文状态</span></span><br><span class="line"><span class="attr">patch:</span></span><br><span class="line"><span class="string">"app_options/devenv.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/illustrator.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/photoshop.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/plantsvszombies"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/winkawaks.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/sublime_text.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"><span class="string">"app_options/Code.exe"</span><span class="string">:</span></span><br><span class="line"><span class="attr">    ascii_mode:</span><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定主题</span></span><br><span class="line"><span class="string">"style/color_scheme"</span><span class="string">:</span><span class="string">ink</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定显示托盘图标，在调配置时，方便右键图标快速执行“重新部署”，以及其它便捷入口。调配完日常使用就 false 隐藏掉吧。</span></span><br><span class="line"><span class="comment"># 没有托盘图标，Windows+R: $ "C:\ProgramData\Microsoft\Windows\Start Menu\Programs\小狼毫輸入法"，里面有相关操作项</span></span><br><span class="line"><span class="comment"># Windows 10下已经发现问题：切换到小狼毫輸入法，Windows徽标就失灵，必须切换至其它输入法，Ctrl+Shift+Esc 中 “Windows 资源管理器” 鼠标右键“重新启动(R)”，才能正常使用。</span></span><br><span class="line"><span class="string">"style/display_tray_icon"</span><span class="string">:</span><span class="literal">false</span></span><br></pre></td></tr></table></figure><h4 id="5-2-4-增强输入方案配置：symbols-custom-yaml"><a href="#5-2-4-增强输入方案配置：symbols-custom-yaml" class="headerlink" title="5.2.4 增强输入方案配置：symbols.custom.yaml"></a>5.2.4 增强输入方案配置：symbols.custom.yaml</h4><p>直接从原作者复制内容过来，进行以下修改：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># / 用来触发增强输入，如： /jq 将调用二十四节气名</span></span><br><span class="line"><span class="comment"># 星号直接上屏 *</span></span><br><span class="line"><span class="comment"># 圆括号为英文状态下的() ，建议文字工作者的你换成中文状态下的（）</span></span><br><span class="line"><span class="comment"># 顿号需要按键 \</span></span><br><span class="line"><span class="comment"># 井号直接上屏 #</span></span><br><span class="line"><span class="comment"># 添加常用网址</span></span><br></pre></td></tr></table></figure><p>代码过多就不贴了；</p><p>配置完重新部署，并执行同步以备份相关配置文件。</p><h2 id="6、存在问题与选择"><a href="#6、存在问题与选择" class="headerlink" title="6、存在问题与选择"></a>6、存在问题与选择</h2><p>操作存在极小可能的不稳定性，以及一些兼容性问题，在权衡了隐私性、调教性后，我能接受。</p><p>开始菜单中，将“小狼毫算法服務”、“【小狼毫】重新部署”和“【小狼毫】用戶資料同步” Pin to Start，方便应对不稳定性。</p><hr><p>扩展阅读与资源：</p><ul><li><a href="https://github.com/rime/home/wiki/UserGuide" target="_blank" rel="noopener">Rime 新手须知的使用方法和技巧</a></li><li><a href="https://github.com/rime/home/wiki/CustomizationGuide" target="_blank" rel="noopener">Rime 定制指南(初阶)</a></li><li><a href="https://github.com/rime/home/wiki/RimeWithSchemata" target="_blank" rel="noopener">Rime 输入方案(中阶)</a></li><li><a href="http://rime.im/code/" target="_blank" rel="noopener">Rime 程序开发(高阶)</a></li><li><a href="http://tieba.baidu.com/p/3288634121" target="_blank" rel="noopener">半月湾C：致第一次安装RIME的你</a></li><li><a href="https://zh.wikipedia.org/wiki/YAML" target="_blank" rel="noopener">wikipedia: YAML</a></li></ul>]]>
    </content>
    <summary type="html">&lt;p&gt;我的需求是需要一套跨平台的输入方案:&lt;/p&gt;
&lt;p&gt;因此，我选择了 &lt;a href=&quot;http://rime.im/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Rime&lt;/a&gt;。&lt;/p&gt;</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="rime" scheme="https://xinlu.ink/tags/rime/"/>
  </entry>
  <entry>
    <title>《批处理笔记》系列归档</title>
    <link href="https://xinlu.ink/tech/batch-in-action.html"/>
    <id>https://xinlu.ink/tech/batch-in-action.html</id>
    <published>2017-05-30T13:21:21.000Z</published>
    <updated>2021-07-10T13:01:48.289Z</updated>
    <content type="html">
      <![CDATA[<p>《批处理笔记》系列归档</p><ul><li><a href="https://xinlu.ink/batch-in-action/">批处理笔记(1) - 基础</a></li><li><a href="https://xinlu.ink/batch-in-action/get-path.html">批处理笔记(2) - 获取目录名、文件名或路径</a></li><li><a href="https://xinlu.ink/batch-in-action/create-folders-from-each-line-of-a-textfile.html">批处理笔记(3) - 通过文本内容行创建文件夹</a></li><li><a href="https://xinlu.ink/batch-in-action/rename-files-from-text.html">批处理笔记(4) - 通过文本内容重命名文件</a></li><li><a href="https://xinlu.ink/batch-in-action/create-folder-using-part-of-filename-and-move-file-into.html">批处理笔记(5) - 根据文件名自动创建目录存放文件</a></li><li><a href="https://xinlu.ink/batch-in-action/multiple-times-rename-files.html">批处理笔记(6) - 多轮修改文件名</a></li><li><a href="https://xinlu.ink/batch-in-action/file-rename.html">批处理笔记(7) - 文件名操作</a></li><li><a href="https://xinlu.ink/batch-in-action/directory-rename.html">批处理笔记(8) - 目录名操作</a></li><li><a href="https://xinlu.ink/batch-in-action/extract-files-from-subfolders-into-the-main-folder.html">批处理笔记(9) - 提取所有子目录文件(拷贝/剪切)</a></li><li><a href="https://xinlu.ink/batch-in-action/multiple-audioclips.html">批处理笔记(10) - 批量剪辑音频</a></li><li><a href="https://xinlu.ink/batch-in-action/removing-a-text-after-and-before-specific-characters-in-files-names.html">批处理笔记(11) - 去除指定字符之前或之后的文件名</a></li><li><a href="https://xinlu.ink/batch-in-action/merge-text-files.html">批处理笔记(12) - 合并文本</a></li><li><a href="https://xinlu.ink/batch-in-action/export-high-quality-gif-pictures-from-video.html">批处理笔记(13) - 从视频导出高质量GIF图片</a></li><li><a href="https://xinlu.ink/batch-in-action/delims.html">批处理笔记(14) - 路径/时间/字符切分等DEMO操作</a></li><li><a href="https://xinlu.ink/batch-in-action/run-batch-at-folder-context-menu.html">批处理笔记(15) - 右键菜单执行批处理文件</a></li></ul>]]>
    </content>
    <summary type="html">&lt;p&gt;《批处理笔记》系列归档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xinlu.ink/batch-in-action/&quot;&gt;批处理笔记(1) - 基础&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinlu.ink/batch-in-acti</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="batch" scheme="https://xinlu.ink/tags/batch/"/>
  </entry>
  <entry>
    <title>《Web重构笔记》系列归档</title>
    <link href="https://xinlu.ink/tech/pro-web-reconstruction.html"/>
    <id>https://xinlu.ink/tech/pro-web-reconstruction.html</id>
    <published>2015-07-23T12:06:18.000Z</published>
    <updated>2021-07-10T13:01:49.924Z</updated>
    <content type="html">
      <![CDATA[<p>《Web重构笔记》系列归档</p><ul><li><a href="https://xinlu.ink/pro-web-reconstruction/">Web重构笔记(1): 为什么要写这个系列</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/getting-started.html">Web重构笔记(2): 来套Web重构装备</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/forecast.html">Web重构笔记(3): Web重构前的分析</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/generate-assets.html">Web重构笔记(4): 切图与标注</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/architecture.html">Web重构笔记(5): 搭建工程目录</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/semantics.html">Web重构笔记(6): 语义化</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/decoupling.html">Web重构笔记(7): 样式、结构、行为分离分割</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/tree-trunk.html">Web重构笔记(8): 主干结构</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/grid-layout.html">Web重构笔记(9): 栅格结构</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/component.html">Web重构笔记(10): 组件结构</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/css-pre-processors-and-declaration.html">Web重构笔记(11): 样式预处理与样式声明</a></li><li><a href="https://xinlu.ink/pro-web-reconstruction/summary.html">Web重构笔记(12): 最后</a></li></ul>]]>
    </content>
    <summary type="html">&lt;p&gt;《Web重构笔记》系列归档&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xinlu.ink/pro-web-reconstruction/&quot;&gt;Web重构笔记(1): 为什么要写这个系列&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://xinlu.</summary>
    <category term="tech" scheme="https://xinlu.ink/categories/tech/"/>
    <category term="web" scheme="https://xinlu.ink/tags/web/"/>
  </entry>
</feed>
